#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
C++
\end_layout

\begin_layout Standard
std::clock() measures CPU time, the precision is 10ms; while std::chrono::system
_clock::now() measures wall clock time, and in higher precision
\end_layout

\begin_layout Standard
see 
\begin_inset CommandInset href
LatexCommand href
name "IntelÂ® Threading Building Blocks, OpenMP, or native threads?"
target "https://software.intel.com/en-us/intel-threading-building-blocks-openmp-or-native-threads"

\end_inset

 for a comparison between TBB, OMP and native threads
\end_layout

\begin_layout Standard
arma::eig_sym may give NaN results even the input is Hermitian.
 Switch to 
\begin_inset Quotes eld
\end_inset

std
\begin_inset Quotes erd
\end_inset

 method may help
\end_layout

\begin_layout Standard
Use of C++11 auto is not recommended with Armadillo objects and expressions.
 Armadillo has a template meta-programming framework which creates lots
 of short lived temporaries that are not handled by auto.
\end_layout

\begin_layout Standard
In template class, use of non-dependent (does not relies on the template
 parameters) members of base class should be careful.
 this-> is needed according to C++ standards.
 However, the default compiler of VS will neglect this mistake, which will
 cause problems in other platforms.
\end_layout

\begin_layout Standard
Openblas is quite convenient and provide comparable performance of Intel
 MKL
\end_layout

\begin_layout Standard
Under Linux (Ubuntu), the frequently used libraries/softwares (blas, lapack,
 openblas, g++...) could be obtained easily
\end_layout

\begin_layout Standard
Need to learn to use debugger in command line
\end_layout

\begin_layout Standard
Pay attention to implicit conversion.
 Use explicit keyword to fix possible ambiguity.
\end_layout

\begin_layout Section
Python
\end_layout

\begin_layout Section
Haskell
\end_layout

\begin_layout Standard
tips:
\end_layout

\begin_layout Standard
seems Haskell is based on functions with only 1 parameter
\end_layout

\begin_layout Standard
($3)(4+) gives 7
\end_layout

\begin_layout Standard
seems 0 or 1 is not pattern for general Num
\end_layout

\begin_layout Standard
-> is right associative by default (since call function by space 
\begin_inset Quotes eld
\end_inset

 
\begin_inset Quotes erd
\end_inset

 is left associative)
\end_layout

\begin_layout Standard
never add typeclass constraints in data declarations
\end_layout

\begin_layout Subsection*
Functors
\end_layout

\begin_layout Standard
Only some random thoughts:
\end_layout

\begin_layout Standard
Functor defined in Catogory Theory is slightly different from the functor
 in Haskell.
 In Haskell, part of the functor (to be more precise, 
\begin_inset Formula $F:\hom(C)\rightarrow\hom(D)$
\end_inset

) is represented by the Haskell fmap function, while the mapping for the
 objects (or sometimes the whole thing) is called the functor?
\end_layout

\begin_layout Standard
One familiar example of functor might be the pushforward of a differential
 manifold, although much less general.
\end_layout

\begin_layout Standard
Under some context, the Huskell functor could behave like a container.
 Say given a category 
\begin_inset Formula $C$
\end_inset

 with 
\begin_inset Formula $X$
\end_inset

, 
\begin_inset Formula $Y$
\end_inset

 in 
\begin_inset Formula ${\rm ob}(C)$
\end_inset

 , the functor 
\begin_inset Formula $F$
\end_inset

 is defined as the power set functor (on the object), i.e.
 
\begin_inset Formula $F(U)=2^{U}$
\end_inset

.
 Therefore the category 
\begin_inset Formula $D$
\end_inset

 contains objects 
\begin_inset Formula $2^{X}$
\end_inset

 and 
\begin_inset Formula $2^{Y}$
\end_inset

.
 Then given any 
\begin_inset Formula $f\in\hom(X,Y)$
\end_inset

, 
\begin_inset Formula $F(f)$
\end_inset

 is a function between containers, i.e.
 
\begin_inset Formula $F(f):\ 2^{X}\rightarrow2^{Y}\in\hom(2^{X},2^{Y})$
\end_inset

.
 The properties of functor could be verified.
 Under such circumstances, the Huskell functor 
\begin_inset Formula ${\rm f}$
\end_inset

 is not really a function, the notation 
\begin_inset Formula ${\rm f\ x}$
\end_inset

 collectivley represent an element accepted by 
\begin_inset Formula $F(f)$
\end_inset

, i.e.
 a subset of 
\begin_inset Formula $X$
\end_inset

, therefore a container.
 For morphisms like 
\begin_inset Formula $f:\ X\times Y\rightarrow Z$
\end_inset

, Haskell could treat it as 
\begin_inset Formula $f':\ X\rightarrow\hom(Y,Z)$
\end_inset

, since one might be able to build an isomorphism between 
\begin_inset Formula $\hom(X\times Y,Z)$
\end_inset

 and 
\begin_inset Formula $\hom(X,\hom(Y,Z))$
\end_inset

.
 At least this is possible for finite sets.
\end_layout

\begin_layout Standard
Under some other context, the Huskell functor behaves like a function decomposit
ion.
 Similarly for a category 
\begin_inset Formula $C$
\end_inset

 with 
\begin_inset Formula $X$
\end_inset

, 
\begin_inset Formula $Y$
\end_inset

 in 
\begin_inset Formula ${\rm ob}(C)$
\end_inset

, we can construct
\begin_inset Formula $\hom(R,X)$
\end_inset

 and 
\begin_inset Formula $\hom(R,Y)$
\end_inset

 as objects of 
\begin_inset Formula $D$
\end_inset

.
 Then one natural choice of 
\begin_inset Formula $F(f)$
\end_inset

 is 
\begin_inset Formula $F(f)=f\circ$
\end_inset

, i.e.
 function composition.
 
\end_layout

\end_body
\end_document
